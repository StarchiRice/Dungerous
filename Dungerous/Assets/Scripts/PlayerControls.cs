//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""efa03207-ab15-4168-b619-db5ffa11cab9"",
            ""actions"": [
                {
                    ""name"": ""MoveL"",
                    ""type"": ""Value"",
                    ""id"": ""c6ce8796-5f1a-4c4e-a7e4-552281b4af49"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookMoveR"",
                    ""type"": ""Value"",
                    ""id"": ""d9b9947c-dbdb-46a3-9278-7308d6605f73"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ModeToggle"",
                    ""type"": ""Button"",
                    ""id"": ""5b496b91-c687-498f-a591-63cff35aefcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""02a1b467-bf93-4f8b-9915-1b9b47448be1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""35f352e4-64c3-44ba-a4e8-938a4fadb4a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""5b087834-5fc6-4a06-bb2d-3d903f4aa8bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldUseItem"",
                    ""type"": ""Button"",
                    ""id"": ""4ea042c9-25f3-47a9-b67f-cc92981dd013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FollowerCommandReturn"",
                    ""type"": ""Button"",
                    ""id"": ""0dffaabb-4bd3-4458-a6a2-bed1fb54c515"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FollowerCommandStandby"",
                    ""type"": ""Button"",
                    ""id"": ""c682aefa-88a7-4e0b-a674-812d40e107c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3563c439-b330-45cd-80e0-eb42d75d153b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54857100-a20a-4d35-8a1b-8af8fb84b5a4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookMoveR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aecfe27-1fbc-453b-ac93-ed19cd918a0a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ModeToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8072c30-7b53-479c-aaac-018842ea7e43"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0458cf58-a2f1-4fe9-9174-9a999d231812"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0c8b52a-b1bd-4de2-a5a8-aa9569550224"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a61b492-5bc2-4add-8ce0-42360860ccab"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldUseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1165d46b-569e-4106-9be0-1736d33d980e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FollowerCommandReturn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1e8e70b-9cef-4e38-b94f-a6a7541a393a"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FollowerCommandStandby"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveL = m_Gameplay.FindAction("MoveL", throwIfNotFound: true);
        m_Gameplay_LookMoveR = m_Gameplay.FindAction("LookMoveR", throwIfNotFound: true);
        m_Gameplay_ModeToggle = m_Gameplay.FindAction("ModeToggle", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_Inventory = m_Gameplay.FindAction("Inventory", throwIfNotFound: true);
        m_Gameplay_UseItem = m_Gameplay.FindAction("UseItem", throwIfNotFound: true);
        m_Gameplay_HoldUseItem = m_Gameplay.FindAction("HoldUseItem", throwIfNotFound: true);
        m_Gameplay_FollowerCommandReturn = m_Gameplay.FindAction("FollowerCommandReturn", throwIfNotFound: true);
        m_Gameplay_FollowerCommandStandby = m_Gameplay.FindAction("FollowerCommandStandby", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_MoveL;
    private readonly InputAction m_Gameplay_LookMoveR;
    private readonly InputAction m_Gameplay_ModeToggle;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_Inventory;
    private readonly InputAction m_Gameplay_UseItem;
    private readonly InputAction m_Gameplay_HoldUseItem;
    private readonly InputAction m_Gameplay_FollowerCommandReturn;
    private readonly InputAction m_Gameplay_FollowerCommandStandby;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveL => m_Wrapper.m_Gameplay_MoveL;
        public InputAction @LookMoveR => m_Wrapper.m_Gameplay_LookMoveR;
        public InputAction @ModeToggle => m_Wrapper.m_Gameplay_ModeToggle;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @Inventory => m_Wrapper.m_Gameplay_Inventory;
        public InputAction @UseItem => m_Wrapper.m_Gameplay_UseItem;
        public InputAction @HoldUseItem => m_Wrapper.m_Gameplay_HoldUseItem;
        public InputAction @FollowerCommandReturn => m_Wrapper.m_Gameplay_FollowerCommandReturn;
        public InputAction @FollowerCommandStandby => m_Wrapper.m_Gameplay_FollowerCommandStandby;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @MoveL.started += instance.OnMoveL;
            @MoveL.performed += instance.OnMoveL;
            @MoveL.canceled += instance.OnMoveL;
            @LookMoveR.started += instance.OnLookMoveR;
            @LookMoveR.performed += instance.OnLookMoveR;
            @LookMoveR.canceled += instance.OnLookMoveR;
            @ModeToggle.started += instance.OnModeToggle;
            @ModeToggle.performed += instance.OnModeToggle;
            @ModeToggle.canceled += instance.OnModeToggle;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @HoldUseItem.started += instance.OnHoldUseItem;
            @HoldUseItem.performed += instance.OnHoldUseItem;
            @HoldUseItem.canceled += instance.OnHoldUseItem;
            @FollowerCommandReturn.started += instance.OnFollowerCommandReturn;
            @FollowerCommandReturn.performed += instance.OnFollowerCommandReturn;
            @FollowerCommandReturn.canceled += instance.OnFollowerCommandReturn;
            @FollowerCommandStandby.started += instance.OnFollowerCommandStandby;
            @FollowerCommandStandby.performed += instance.OnFollowerCommandStandby;
            @FollowerCommandStandby.canceled += instance.OnFollowerCommandStandby;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @MoveL.started -= instance.OnMoveL;
            @MoveL.performed -= instance.OnMoveL;
            @MoveL.canceled -= instance.OnMoveL;
            @LookMoveR.started -= instance.OnLookMoveR;
            @LookMoveR.performed -= instance.OnLookMoveR;
            @LookMoveR.canceled -= instance.OnLookMoveR;
            @ModeToggle.started -= instance.OnModeToggle;
            @ModeToggle.performed -= instance.OnModeToggle;
            @ModeToggle.canceled -= instance.OnModeToggle;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @HoldUseItem.started -= instance.OnHoldUseItem;
            @HoldUseItem.performed -= instance.OnHoldUseItem;
            @HoldUseItem.canceled -= instance.OnHoldUseItem;
            @FollowerCommandReturn.started -= instance.OnFollowerCommandReturn;
            @FollowerCommandReturn.performed -= instance.OnFollowerCommandReturn;
            @FollowerCommandReturn.canceled -= instance.OnFollowerCommandReturn;
            @FollowerCommandStandby.started -= instance.OnFollowerCommandStandby;
            @FollowerCommandStandby.performed -= instance.OnFollowerCommandStandby;
            @FollowerCommandStandby.canceled -= instance.OnFollowerCommandStandby;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMoveL(InputAction.CallbackContext context);
        void OnLookMoveR(InputAction.CallbackContext context);
        void OnModeToggle(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnHoldUseItem(InputAction.CallbackContext context);
        void OnFollowerCommandReturn(InputAction.CallbackContext context);
        void OnFollowerCommandStandby(InputAction.CallbackContext context);
    }
}
